// Code generated by protoc-gen-chat. DO NOT EDIT.
// rpcsvr option

package rpc

import (
	"github.com/jsn4ke/chat/pkg/pb/message_rpc"
	jsn_rpc "github.com/jsn4ke/jsn_net/rpc"
)

// type rpcAuthServer struct  {
// svr *jsn_rpc.Server
// in  chan *jsn_rpc.AsyncRpc
// }
func (s *rpcAuthServer) RegisterRpc() {
	s.svr.RegisterExecutor(new(message_rpc.RpcAuthCheckAsk), s.SyncRpc)
}
func (s *rpcAuthServer) SyncRpc(in jsn_rpc.RpcUnit) (jsn_rpc.RpcUnit, error) {
	wrap := jsn_rpc.AsyncRpcPool.Get()
	wrap.Error = make(chan error, 1)
	s.in <- wrap
	err := <-wrap.Error
	return wrap.Reply, err
}
func (s *rpcAuthServer) handleIn(wrap *jsn_rpc.AsyncRpc) {
	var err error
	defer func() {
		wrap.Error <- err
	}()
	switch in := wrap.In.(type) {
	case *message_rpc.RpcAuthCheckAsk:
		// func(s *rpcAuthServer)RpcAuthCheckAsk(in *message_rpc.RpcAuthCheckAsk) error
		err = s.RpcAuthCheckAsk(in)
	default:
		err = InvalidRpcInputError
	}
}
