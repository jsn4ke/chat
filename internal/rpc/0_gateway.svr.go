// Code generated by protoc-gen-chat. DO NOT EDIT.
// rpcsvr option

package rpc

import (
	"github.com/jsn4ke/chat/pkg/pb/message_rpc"
	jsn_rpc "github.com/jsn4ke/jsn_net/rpc"
	"github.com/jsn4ke/chat/internal/inter/rpcinter"
)

/*
	func NewRpcGatewaySvr(svr *jsn_rpc.Server, runNum int, done <-chan struct{}) rpcinter.RpcGatewaySvr {
		s := new(rpcGatewaySvr)
		c := new(rpcCore)
		c.svr = svr
		c.in = make(chan *jsn_rpc.AsyncRpc, 128)
		c.done = done
		c.runNum = runNum

		s.rpcGatewayCore.rpcCore = c
		s.rpcGatewayCore.wrap = s
		return s
	}

	type rpcGatewaySvr struct {
		rpcGatewayCore
	}

	func (s *rpcGatewaySvr) Run() {
		s.registerRpc()

		s.svr.Start()
		for i := 0; i < s.runNum; i++ {
			jsn_net.WaitGo(&s.wg, s.run)
		}
		s.wg.Wait()
	}

func(s *rpcGatewaySvr)RpcGatewayKickUserSync(in *message_rpc.RpcGatewayKickUserSync) {}
func(s *rpcGatewaySvr)RpcGatewayInfoRequest(in *message_rpc.RpcGatewayInfoRequest)(*message_rpc.RpcGatewayInfoResponse, error) {}
func(s *rpcGatewaySvr)RpcGatewayChannelPushSync(in *message_rpc.RpcGatewayChannelPushSync) {}
*/
/*
	func NewRpcUnionGatewaySvr(svr *jsn_rpc.Server, runNum int, done <-chan struct{}) rpcinter.RpcUnionGatewaySvr {
		s := new(rpcUnionGatewaySvr)
		c := new(rpcCore)
		c.svr = svr
		c.in = make(chan *jsn_rpc.AsyncRpc, 128)
		c.done = done
		c.runNum = runNum

		s.rpcUnionGatewayCore.rpcCore = c
		s.rpcUnionGatewayCore.wrap = s
		return s
	}

	type rpcUnionGatewaySvr struct {
		rpcUnionGatewayCore
	}

	func (s *rpcUnionGatewaySvr) Run() {
		s.registerRpc()

		s.svr.Start()
		for i := 0; i < s.runNum; i++ {
			jsn_net.WaitGo(&s.wg, s.run)
		}
		s.wg.Wait()
	}

func(s *rpcUnionGatewaySvr)RpcUnionGatewayUploadGatewayInfoAsk(in *message_rpc.RpcUnionGatewayUploadGatewayInfoAsk) error {}
*/
type rpcGatewayCore struct {
	*rpcCore
	wrap rpcinter.RpcGatewaySvrWrap
}

func (s *rpcGatewayCore) registerRpc() {
	s.svr.RegisterExecutor(new(message_rpc.RpcGatewayKickUserSync), s.syncRpc)
	s.svr.RegisterExecutor(new(message_rpc.RpcGatewayInfoRequest), s.syncRpc)
	s.svr.RegisterExecutor(new(message_rpc.RpcGatewayChannelPushSync), s.syncRpc)
}
func (s *rpcGatewayCore) syncRpc(in jsn_rpc.RpcUnit) (jsn_rpc.RpcUnit, error) {
	wrap := jsn_rpc.AsyncRpcPool.Get()
	wrap.In = in
	wrap.Error = make(chan error, 1)
	s.in <- wrap
	err := <-wrap.Error
	return wrap.Reply, err
}
func (s *rpcGatewayCore) run() {
	for {
		select {
		case <-s.done:
			select {
			case in := <-s.in:
				in.Error <- RpcDownError
			default:
				return
			}
		case in := <-s.in:
			s.handleIn(in)
		}
	}
}

type rpcUnionGatewayCore struct {
	*rpcCore
	wrap rpcinter.RpcUnionGatewaySvrWrap
}

func (s *rpcUnionGatewayCore) registerRpc() {
	s.svr.RegisterExecutor(new(message_rpc.RpcUnionGatewayUploadGatewayInfoAsk), s.syncRpc)
}
func (s *rpcUnionGatewayCore) syncRpc(in jsn_rpc.RpcUnit) (jsn_rpc.RpcUnit, error) {
	wrap := jsn_rpc.AsyncRpcPool.Get()
	wrap.In = in
	wrap.Error = make(chan error, 1)
	s.in <- wrap
	err := <-wrap.Error
	return wrap.Reply, err
}
func (s *rpcUnionGatewayCore) run() {
	for {
		select {
		case <-s.done:
			select {
			case in := <-s.in:
				in.Error <- RpcDownError
			default:
				return
			}
		case in := <-s.in:
			s.handleIn(in)
		}
	}
}
func (s *rpcGatewayCore) handleIn(wrap *jsn_rpc.AsyncRpc) {
	var err error
	defer func() {
		wrap.Error <- err
	}()
	switch in := wrap.In.(type) {
	case *message_rpc.RpcGatewayKickUserSync:
		// func(s *rpcGatewaySvr)RpcGatewayKickUserSync(in *message_rpc.RpcGatewayKickUserSync)
		s.wrap.RpcGatewayKickUserSync(in)
	case *message_rpc.RpcGatewayInfoRequest:
		// func(s *rpcGatewaySvr)RpcGatewayInfoRequest(in *message_rpc.RpcGatewayInfoRequest)(*message_rpc.RpcGatewayInfoResponse, error)
		wrap.Reply, err = s.wrap.RpcGatewayInfoRequest(in)
	case *message_rpc.RpcGatewayChannelPushSync:
		// func(s *rpcGatewaySvr)RpcGatewayChannelPushSync(in *message_rpc.RpcGatewayChannelPushSync)
		s.wrap.RpcGatewayChannelPushSync(in)
	default:
		err = InvalidRpcInputError
	}
}
func (s *rpcUnionGatewayCore) handleIn(wrap *jsn_rpc.AsyncRpc) {
	var err error
	defer func() {
		wrap.Error <- err
	}()
	switch in := wrap.In.(type) {
	case *message_rpc.RpcUnionGatewayUploadGatewayInfoAsk:
		// func(s *rpcUnionGatewaySvr)RpcUnionGatewayUploadGatewayInfoAsk(in *message_rpc.RpcUnionGatewayUploadGatewayInfoAsk) error
		err = s.wrap.RpcUnionGatewayUploadGatewayInfoAsk(in)
	default:
		err = InvalidRpcInputError
	}
}
