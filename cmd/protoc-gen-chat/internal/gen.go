package protoc_gen_chat

import (
	"path"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func Gen(gen *protogen.Plugin, file *protogen.File) {

}

func GenRpcCli(gen *protogen.Plugin, file *protogen.File, dir string) {
	in := false
	for _, v := range file.Messages {
		if strings.HasPrefix(v.GoIdent.GoName, `Rpc`) &&
			strings.HasSuffix(v.GoIdent.GoName, `Unit`) {
			in = true
			break
		}
	}
	if !in {
		return
	}
	sps := strings.Split(file.GeneratedFilenamePrefix, `/`)

	filename := "0_" + sps[len(sps)-1] + ".cli.go"
	filename = path.Join(dir, filename)
	sps = strings.Split(dir, `/`)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P(`// Code generated by protoc-gen-chat. DO NOT EDIT.`)
	g.P(`// rpccli option`)
	g.P(``)

	g.P(`package `, sps[len(sps)-1])

}

func GenRpcExt(gen *protogen.Plugin, file *protogen.File) {

	fixMessage := func(s string) bool {
		if strings.HasSuffix(s, `Request`) {
			return true
		}
		if strings.HasSuffix(s, `Response`) {
			return true
		}
		if strings.HasSuffix(s, `Ask`) {
			return true
		}
		if strings.HasSuffix(s, `Sync`) {
			return true
		}
		return false
	}
	in := false
	for _, v := range file.Messages {
		if !fixMessage(v.GoIdent.GoName) {
			continue
		}
		in = true
		break
	}
	if !in {
		return
	}
	filename := file.GeneratedFilenamePrefix + ".ext.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P(`// Code generated by protoc-gen-chat. DO NOT EDIT.`)
	g.P(`// rpcext option`)

	g.P(`package `, file.GoPackageName)
	head := `
	import (
		jsn_rpc "github.com/jsn4ke/jsn_net/rpc"
		"google.golang.org/protobuf/proto"
	)`
	g.P(head)

	needKuohao := false
	for _, v := range file.Messages {
		if !fixMessage(v.GoIdent.GoName) {
			continue
		}
		if !needKuohao {
			needKuohao = true
			g.P(`var (`)

		}
		g.P(`_ jsn_rpc.RpcUnit = (*`, v.GoIdent.GoName, `)(nil)`)
	}
	if needKuohao {
		g.P(`)`)
	}
	for _, v := range file.Messages {
		if !fixMessage(v.GoIdent.GoName) {
			continue
		}
		g.P(`func (*`, v.GoIdent.GoName, `) CmdId() uint32 {`)
		g.P(`return uint32(RpcCmd_RpcCmd_`, v.GoIdent.GoName, `)`)
		g.P(`}`)

		g.P(`func (x *`, v.GoIdent.GoName, `) Marshal() ([]byte, error) {`)
		g.P(`return proto.Marshal(x)`)
		g.P("}")

		g.P(`func (x *`, v.GoIdent.GoName, `) Unmarshal(in []byte)  error {`)
		g.P(`return proto.Unmarshal(in, x)`)
		g.P("}")

		g.P(`func (*`, v.GoIdent.GoName, `) New() jsn_rpc.RpcUnit {`)
		g.P(`return new(`, v.GoIdent.GoName, `)`)
		g.P(`}`)
	}
}
